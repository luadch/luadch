--// Note: You should use a texteditor with Lua syntax highlighting e.g.: Notepad++

return {

    ---------------------------------------------------------------------------------------------------------------------------------
    --// Basic Settings

    hub_name = "Luadch Hub",  -- name of your hub (string)
    hub_description = "your hub description",  -- hub default description (string)

    hub_hostaddress = "your.host.addy.org",  -- your hostadress (string)
    tcp_ports = { 5000 },  -- listen on these ports for normal tcp connections (e.g.: adc://<address>:<port>) (integer array); for an only SSL-Hub do: tcp_ports = { },
    ssl_ports = { 5001 },  -- listen on these ports for ssl tcp connections (e.g.: adcs://<address>:<port>) (integer array); to use more than one port use: { port, port, port },

    tcp_ports_ipv6 = { 5002 },  -- listen on these ports for normal tcp IPv6 connections (e.g.: adc://<address>:<port>) (integer array); for an only SSL-Hub do: tcp_ports_ipv6 = { },
    ssl_ports_ipv6 = { 5003 },  -- listen on these ports for ssl tcp IPv6 connections (e.g.: adcs://<address>:<port>) (integer array); to use more than one port use: { port, port, port },

    use_ssl = true,  -- use ssl (boolean); you have to make a cert for adcs!

    use_keyprint = true,  -- use keyprint (boolean), attachment for the hostaddress (only adcs://) e.g.: adcs://your.host.addy.org:5001/?kp=SHA256/7KGKGB44A5AEPZXTNLVBIAE4HLNVBUO42ONIELL2XYFS4RTPMIYT
    keyprint_type = "/?kp=SHA256/",  -- keyprint type (string), do not touch this!
    keyprint_hash = "<KEYPRINT>",  -- add here the keyprint hash generated by "Luadch Certmanager" or "make_keyprint.bat/.sh" (string), for help read the description in "make_keyprint.bat/.sh"

    hub_website = "http://yourwebsite.org",  -- your website (string)
    hub_network = "your hubnetwork name",  -- your hubnetwork (string)
    hub_email = "hub@mail.com", -- your hub email (string)
    hub_owner = "you",  -- hubowner (string)

    hub_bot = "[BOT]HubSecurity",  -- name of hub bot (string)
    hub_bot_desc = "[ BOT ] Hub Security",  -- description of hub bot (string)
    hub_bot_email = false, -- show hub_email as hub_bot email in userlist (boolean)

    reg_only = true,  -- reg only hub (boolean)

    max_users = 2000,  -- max users (integer)

    max_bad_password = 3,  -- max bad password on connect (integer)
    bad_pass_timeout = 300,  -- tempban in seconds if max bad password was exceeded (integer)
    min_password_length = 10,  -- minimum length of the password (integer)
    max_password_length = 30,  -- maximum length of the password (integer)

    min_nickname_length = 3,  -- minimum length of the nickname (integer)
    max_nickname_length = 30,  -- maximum length of the nickname (integer)

    key_level = 50,  -- min level to get a key (integer); match this with your scripts

    debug = false,  -- displays events, errors or script messages on screen (boolean); warning: slows the hub down when active!
    log_errors = true,  -- save errors in a log file (boolean); should be true
    log_events = false,  -- saves debug messages (boolean); warning: slows the hub down when active!; generates a big log file!
    log_scripts = false,  -- saves script messages (boolean); warning: generate a big log file!

    language = "en",  -- your language version (string); available: en = english / de = german (check project website for additional languages)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// Your hub levels with level names | match it with all of your script permissions! (array of strings)

    levels = {

        [ 0 ] = "UNREG",
        [ 10 ] = "GUEST",
        [ 20 ] = "REG",
        [ 30 ] = "VIP",
        [ 40 ] = "SVIP",
        [ 50 ] = "SERVER",
        [ 55 ] = "SBOT",
        [ 60 ] = "OPERATOR",
        [ 70 ] = "SUPERVISOR",
        [ 80 ] = "ADMIN",
        [ 100 ] = "HUBOWNER",
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// bot_regchat.lua settings | this script regs an reg chat

    bot_regchat_activate = true,  -- activate this script? (boolean)

    bot_regchat_nick = "[CHAT]RegChat",  -- reg chat name? (string)
    bot_regchat_desc = "[ CHAT ] chatroom for reg users",  -- reg chat description? (string)

    bot_regchat_history = true,  -- use chat history? (boolean)
    bot_regchat_max_entrys = 300,  -- max posts to save in database? (integer)
    bot_regchat_oplevel = 60,  -- minlevel to reset the history (integer)

    bot_regchat_permission = {  -- who is allowed to join the reg chat? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// bot_opchat.lua settings | this script regs an op chat

    bot_opchat_activate = true,  -- activate this script? (boolean)

    bot_opchat_nick = "[CHAT]OpChat",  -- op chat name? (string)
    bot_opchat_desc = "[ CHAT ] chatroom for operators",  -- op chat description? (string)

    bot_opchat_history = true,  -- use chat history? (boolean)
    bot_opchat_max_entrys = 300,  -- max posts to save in database? (integer)
    bot_opchat_oplevel = 60,  -- minlevel to reset the history (integer)

    bot_opchat_permission = {  -- who is allowed to join the op chat? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// bot_pm2ops.lua settings | this script regs a PmToOps Bot to send messages to OpChat

    bot_pm2ops_activate = true,  -- activate this script? (boolean) / important: this script needs "bot_opchat_activate = true"

    bot_pm2ops_nick = "[CHAT]PmToOps",  -- pm2op name? (string)
    bot_pm2ops_desc = "[ CHAT ] send msg to all ops",  -- pm2op description? (string)

    bot_pm2ops_permission = {  -- who is allowed to use this script? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_hubs.lua settings | this script checks the hub count of a user

    max_hubs = 100,  -- max hubs (integer)
    max_user_hubs = 100,  -- max normal hubs (public hubs) (integer)
    max_reg_hubs = 100,  -- max reg hubs (integer)
    max_op_hubs = 100,  -- max op hubs (integer)

    usr_hubs_godlevel = 60,  -- users with this level or above wont be checked (integer)

    usr_hubs_block_time = 15,  -- ban time in minutes (integer)

    usr_hubs_report = true,  -- send status report? (boolean)
    usr_hubs_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    usr_hubs_report_opchat = true,  -- send report as opchat feed? (boolean)
    usr_hubs_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_share.lua settings | this script checks the share size of a user

    min_share = {  -- min share in giga byte (array of integer)

        [ 0 ] = 0,  -- unreg (default = 0 giga byte)
        [ 10 ] = 0,  -- guest (default = 0 giga byte)
        [ 20 ] = 0,  -- reg (default = 0 giga byte)
        [ 30 ] = 0,  -- vip (default = 0 giga byte)
        [ 40 ] = 0,  -- svip (default = 0 giga byte)
        [ 50 ] = 0,  -- server (default = 0 giga byte)
        [ 55 ] = 0,  -- sbot (default = 0 giga byte)
        [ 60 ] = 0,  -- operator (default = 0 giga byte)
        [ 70 ] = 0,  -- supervisor (default = 0 giga byte)
        [ 80 ] = 0,  -- admin (default = 0 giga byte)
        [ 100 ] = 0,  -- hubowner (default = 0 giga byte)
    },

    max_share = {  -- max share in terra byte (array of integer)

        [ 0 ] = 200,  -- unreg (default = 200 terra byte)
        [ 10 ] = 200,  -- guest (default = 200 terra byte)
        [ 20 ] = 200,  -- reg (default = 200 terra byte)
        [ 30 ] = 200,  -- vip (default = 200 terra byte)
        [ 40 ] = 200,  -- svip (default = 200 terra byte)
        [ 50 ] = 200,  -- server (default = 200 terra byte)
        [ 55 ] = 200,  -- sbot (default = 200 terra byte)
        [ 60 ] = 200,  -- operator (default = 200 terra byte)
        [ 70 ] = 200,  -- supervisor (default = 200 terra byte)
        [ 80 ] = 200,  -- admin (default = 200 terra byte)
        [ 100 ] = 200,  -- hubowner (default = 200 terra byte)
    },

    usr_share_redirect = false,  -- use redirect instead of disconnect? (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_slots.lua settings | this script checks the slots of a user

    min_slots = {  -- min slots (array of integer)

        [ 0 ] = 1,  -- unreg (default = 1 slot)
        [ 10 ] = 1,  -- guest (default = 1 slot)
        [ 20 ] = 1,  -- reg (default = 1 slot)
        [ 30 ] = 1,  -- vip (default = 1 slot)
        [ 40 ] = 1,  -- svip (default = 1 slot)
        [ 50 ] = 1,  -- server (default = 1 slot)
        [ 55 ] = 0,  -- sbot (default = 0 slots)
        [ 60 ] = 0,  -- operator (default = 0 slots)
        [ 70 ] = 0,  -- supervisor (default = 0 slots)
        [ 80 ] = 0,  -- admin (default = 0 slots)
        [ 100 ] = 0,  -- hubowner (default = 0 slots)
    },

    max_slots = {  -- max slots (array of integer)

        [ 0 ] = 100,  -- unreg (default = 100 slots)
        [ 10 ] = 100,  -- guest (default = 100 slots)
        [ 20 ] = 100,  -- reg (default = 100 slots)
        [ 30 ] = 100,  -- vip (default = 100 slots)
        [ 40 ] = 100,  -- svip (default = 100 slots)
        [ 50 ] = 100,  -- server (default = 100 slots)
        [ 55 ] = 100,  -- sbot (default = 100 slots)
        [ 60 ] = 100,  -- operator (default = 100 slots)
        [ 70 ] = 100,  -- supervisor (default = 100 slots)
        [ 80 ] = 100,  -- admin (default = 100 slots)
        [ 100 ] = 100,  -- hubowner (default = 100 slots)
    },

    usr_slots_redirect = false,  -- use redirect instead of disconnect? (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_topic.lua settings | this script adds a command to set the hub topic

    cmd_topic_minlevel = 100,  -- min level to change the topic? (integer)

    cmd_topic_report = true,  -- send status report? (boolean)
    cmd_topic_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_topic_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_topic_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_ascii.lua settings | this script adds a command to send ascii pictures to main chat

    cmd_ascii_minlevel = 20,  -- min level to send ascii pictures to main? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_disconnect.lua settings | this script adds a command to disconnect users from hub

    cmd_disconnect_minlevel = 60,  -- min level to use this cmd? (integer)

    cmd_disconnect_sendmainmsg = false,  -- send a main-message to all? (boolean)

    cmd_disconnect_report = true,  -- send status report? (boolean)
    cmd_disconnect_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_disconnect_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_disconnect_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_ban.lua settings | this script adds a command to ban/unban users from hub

    -- Part 1 - ban

    cmd_ban_permission = {  -- min level to use this cmd? (according permission table) (array of integer)

        -- [ user_level ] = level   means user_level can ban users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't ban)
        [ 10 ] = 0,  -- guest (default = 0 = can't ban)
        [ 20 ] = 0,  -- reg (default = 0 = can't ban)
        [ 30 ] = 0,  -- vip (default = 0 = can't ban)
        [ 40 ] = 0,  -- svip (default = 0 = can't ban)
        [ 50 ] = 0,  -- server (default = 0 = can't ban)
        [ 55 ] = 0,  -- sbot (default = 0 = can't ban)
        [ 60 ] = 50,  -- operator (default = 50 = to server)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operator)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisor)
        [ 100 ] = 100,  -- hubowner (default = 100 = can ban all)
    },

    cmd_ban_default_time = 20,  -- default ban time in minutes (default = 20) (number)

    cmd_ban_report = true,  -- send status report? (boolean)
    cmd_ban_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_ban_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_ban_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    -- Part 2 - unban

    cmd_unban_permission = {  -- who is allowed to use this command? (array of integer)

        -- [ user_level ] = level   means user_level can unban users banned by level

        [ 0 ] = 0,  -- unreg (default = 0 = can't unban)
        [ 10 ] = 0,  -- guest (default = 0 = can't unban)
        [ 20 ] = 0,  -- reg (default = 0 = can't unban)
        [ 30 ] = 0,  -- vip (default = 0 = can't unban)
        [ 40 ] = 0,  -- svip (default = 0 = can't unban)
        [ 50 ] = 0,  -- server (default = 0 = can't unban)
        [ 55 ] = 0,  -- sbot (default = 0 = can't unban)
        [ 60 ] = 60,  -- operator (default = 60 = can unban users banned by operators)
        [ 70 ] = 70,  -- supervisor (default = 70 = can unban users banned by supervisors)
        [ 80 ] = 80,  -- admin (default = 80 = can unban users banned by admins)
        [ 100 ] = 100,  -- hubowner (default = 100 = can unban all)
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_reg.lua settings | this script adds a command to reg new user in the hub

    cmd_reg_permission = {  -- min level to use this cmd? (according permission table) (array of integer)

        -- [ user_level ] = level   means user_level can reg users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't reg)
        [ 10 ] = 0,  -- guest (default = 0 = can't reg)
        [ 20 ] = 0,  -- reg (default = 0 = can't reg)
        [ 30 ] = 0,  -- vip (default = 0 = can't reg)
        [ 40 ] = 0,  -- svip (default = 0 = can't reg)
        [ 50 ] = 0,  -- server (default = 0 = can't reg)
        [ 55 ] = 0,  -- sbot (default = 0 = can't reg)
        [ 60 ] = 10,  -- operator (default = 10 = to guest)
        [ 70 ] = 20,  -- supervisor (default = 20 = to reg)
        [ 80 ] = 60,  -- admin (default = 60 = to operator)
        [ 100 ] = 100,  -- hubowner (default = 100 = can reg all)
    },

    cmd_reg_report = true,  -- send status report? (boolean)
    cmd_reg_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_reg_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_reg_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_delreg.lua settings | to delete users from hub - the user will blacklisted if you adds a delreg reason

    cmd_delreg_permission = {  -- min level to use this cmd (according permission table) (array of integer)

        -- [ user_level ] = level   means user_level can delreg users by level

        [ 0 ] = 0,  -- unreg (default = 0 = can't delreg)
        [ 10 ] = 0,  -- guest (default = 0 = can't delreg)
        [ 20 ] = 0,  -- reg (default = 0 = can't delreg)
        [ 30 ] = 0,  -- vip (default = 0 = can't delreg)
        [ 40 ] = 0,  -- svip (default = 0 = can't delreg)
        [ 50 ] = 0,  -- server (default = 0 = can't delreg)
        [ 55 ] = 0,  -- sbot (default = 0 = can't delreg)
        [ 60 ] = 0,  -- operator (default = 0 = can't delreg)
        [ 70 ] = 0,  -- supervisor (default = 0 = can't delreg)
        [ 80 ] = 10,  -- admin (default = 10 = can delreg to guest)
        [ 100 ] = 100,  -- hubowner (default = 100 = can delreg all)
    },

    cmd_delreg_report = true,  -- send status report? (boolean)
    cmd_delreg_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_delreg_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_delreg_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_blacklist.lua settings | this script adds a command to show and delete users of the blacklist

    etc_blacklist_oplevel = 60,  -- who can show the blacklist? (integer)
    etc_blacklist_masterlevel = 100,  -- who can delete users from blacklist? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_upgrade.lua settings | this script adds a command to upgrade the level of a user

    cmd_upgrade_permission = {  -- who is allowed to use this command? (array of integer)

        -- [ user_level ] = level   means user_level can upgrade users by level

        [ 0 ] = 0,  -- unreg (default = 0 = can't upgrade)
        [ 10 ] = 0,  -- guest (default = 0 = can't upgrade)
        [ 20 ] = 0,  -- reg (default = 0 = can't upgrade)
        [ 30 ] = 0,  -- vip (default = 0 = can't upgrade)
        [ 40 ] = 0,  -- svip (default = 0 = can't upgrade)
        [ 50 ] = 0,  -- server (default = 0 = can't upgrade)
        [ 55 ] = 0,  -- sbot (default = 0 = can't upgrade)
        [ 60 ] = 0,  -- operator (default = 0 = can't upgrade)
        [ 70 ] = 0,  -- supervisor (default = 0 = can't upgrade)
        [ 80 ] = 0,  -- admin (default = 0 = can't upgrade)
        [ 100 ] = 100,  -- hubowner (default = 100 = can upgrade all)
    },

    cmd_upgrade_report = true,  -- send status report? (boolean)
    cmd_upgrade_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_upgrade_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_upgrade_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    cmd_upgrade_advanced_rc = false,  -- warning: this feature adds a complete list of all regusers to the rightclick, this could brings problems in bigger (60+) hubs!

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_accinfo.lua settings | this script adds a command "accinfo", get infos about a reguser

    cmd_accinfo_permission = {  -- min level to use this cmd? (according cmd_accinfo_oplevel) (array of integer)

        -- [ user_level ] = level   means user_level can get info about regusers with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't use accinfo)
        [ 10 ] = 0,  -- guest (default = 0 = can't use accinfo)
        [ 20 ] = 0,  -- reg (default = 0 = can't use accinfo)
        [ 30 ] = 0,  -- vip (default = 0 = can't use accinfo)
        [ 40 ] = 0,  -- svip (default = 0 = can't use accinfo)
        [ 50 ] = 0,  -- server (default = 0 = can't use accinfo)
        [ 55 ] = 0,  -- sbot (default = 0 = can't use accinfo)
        [ 60 ] = 50,  -- operator (default = 50 = to server)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operator)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisor)
        [ 100 ] = 100,  -- hubowner (default = 100 = can get accinfo about all)
    },

    cmd_accinfo_advanced_rc = false,  -- warning: this feature adds a complete list of all regusers to the rightclick, this could brings problems in bigger (60+) hubs! (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_reload.lua settings | this script adds a command to refresh the cfg.tbl ans scripts if there was changed

    cmd_reload_permission = {  -- who is allowed to use this command? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_restart.lua settings | this script adds a command to restart the hub if needed

    cmd_restart_permission = {  -- who is allowed to use this command? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    cmd_restart_toggle_countdown = true,  -- activate countdown mode? (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_shutdown.lua settings | this script adds a command to complete shutdown the hub

    cmd_shutdown_permission = {  -- who is allowed to use this command? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = false,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    cmd_shutdown_toggle_countdown = true,  -- activate countdown mode? (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_errors.lua settings | this script adds a command to show the error.log

    cmd_errors_permission = {  -- min level to use this cmd? (according permission table) (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_setpass.lua settings | to change the password of your own or a user  PS: every user can change his own password

    cmd_setpass_permission = {  -- who is allowed to use this command? (array of integer)

        -- [ user_level ] = level   means user_level can setpas of users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't set passwords)
        [ 10 ] = 0,  -- guest (default = 0 = can't set passwords)
        [ 20 ] = 0,  -- reg (default = 0 = can't set passwords)
        [ 30 ] = 0,  -- vip (default = 0 = can't set passwords)
        [ 40 ] = 0,  -- svip (default = 0 = can't set passwords)
        [ 50 ] = 0,  -- server (default = 0 = can't set passwords)
        [ 55 ] = 0,  -- sbot (default = 0 = can't set passwords)
        [ 60 ] = 50,  -- operator (default = 50 = to servers)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operators)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisors)
        [ 100 ] = 100,  -- hubowner (default = 100 = can set passwords of all)
    },

    cmd_setpass_permission_own_pw = {  -- permission to change own password? (according permission table) (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    cmd_setpass_advanced_rc = false,  -- warning: this feature adds a complete list of all regusers to the rightclick, this could brings problems in bigger (60+) hubs!

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_nickchange.lua settings | this script adds a command "nickchange" to change the nick of your own / or others (oplevel)

    nick_change = true,  -- activate this script? (boolean)

    cmd_nickchange_minlevel = 60,  -- who is allowed to use this command? (integer)
    cmd_nickchange_oplevel = 60,  -- who is allowed to change nicks from others and read report (integer)

    cmd_nickchange_report = true,  -- send report (boolean)
    cmd_nickchange_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_nickchange_report_opchat = true,  -- send report as opchat feed? (boolean)

    cmd_nickchange_advanced_rc = false,  -- warning: this feature adds a complete list of all regusers to the rightclick, this could brings problems in bigger (60+) hubs!

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_userinfo.lua settings | to get basic infos about a user  PS: every user can get his own userinfo

    cmd_userinfo_permission = {  -- who is allowed to use this command? (array of integer)

        -- [ user_level ] = level means   user_level can get info about users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't use userinfo)
        [ 10 ] = 0,  -- guest (default = 0 = can't use userinfo)
        [ 20 ] = 0,  -- reg (default = 0 = can't use userinfo)
        [ 30 ] = 0,  -- vip (default = 0 = can't use userinfo)
        [ 40 ] = 0,  -- svip (default = 0 = can't use userinfo)
        [ 50 ] = 0,  -- server (default = 0 = can't use userinfo)
        [ 55 ] = 0,  -- sbot (default = 0 = can't use userinfo)
        [ 60 ] = 50,  -- operator (default = 50 = to servers)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operators)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisors)
        [ 100 ] = 100,  -- hubowner (default = 100 = can get userinfo about all)
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_userlist.lua settings | this script adds a command to show a list of all regged users sorted by level

    cmd_userlist_minlevel = 60,  -- min level to use this command? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_usersearch.lua settings | this script adds a command to lookup everything matching the search string from user database

    cmd_usersearch_minlevel = 60,  -- min level to use this command? (integer)
    cmd_usersearch_max_limit = 200,  -- adjust max amount of matches (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_slots.lua settings | this script shows all users with free slots

    cmd_slots_minlevel = 0,  -- min level to use this command? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_mass.lua settings | this script adds a command to send a message to all users in the hub

    cmd_mass_permission = {  -- min level to use this cmd? (according permission table) (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    cmd_mass_oplevel = 60,  -- min level to send mass without sender / send mass to specific levels and get an advanced rightclick (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_talk.lua settings | this script adds a command to post messages without own nickname on main chat

    cmd_talk_minlevel = 60,  -- min level to use this command? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_pm2offliners settings | this script adds a command to sends a PM to an offline User

    cmd_pm2offliners_minlevel = 30,  -- min level to use this command? (integer)
    cmd_pm2offliners_oplevel = 100,  -- min level to delete the message database? (integer)
    cmd_pm2offliners_delay = 7,  -- how many seconds after login before send? (integer)

    cmd_pm2offliners_advanced_rc = false,  -- warning: this feature adds a complete list of all regusers to the rightclick, this could brings problems in bigger (60+) hubs!

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_hubinfo.lua settings | this script adds a command to show a list of basic informations about the hub

    cmd_hubinfo_minlevel = 10,  -- min level to use this command? (integer)
    cmd_hubinfo_onlogin = false,  -- show hubinfo on login? (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_uptime.lua settings | this script adds a command to show the user and hub uptime

    cmd_uptime_minlevel = 0,  -- min level to use this command? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_rules.lua settings | this script adds a command to show the hub rules

    cmd_rules_minlevel = 0,  -- min level to use this command? (integer)

    cmd_rules_destination_main = true,  -- send rules to main
    cmd_rules_destination_pm = false,  -- send rules as pm

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_motd.lua settings | this script sends the motd (message of the day) to main

    etc_motd_activate = true,  -- activate this script? (boolean)

    etc_motd_permission = {  -- who gets a motd message? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    etc_motd_destination_main = true,  -- send motd to main
    etc_motd_destination_pm = false,  -- send motd as pm

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_userlogininfo.lua settings | this script sends a basic user-login-info on login

    etc_userlogininfo_activate = true,  -- activate this script? (boolean)

    etc_userlogininfo_permission = {  -- who can get a userlogin info? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_banner.lua settings | this script sends a banner in regular intervals to mainchat

    etc_banner_activate = true,  -- activate this script? (boolean)

    etc_banner_permission = {  -- who gets a banner message? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    etc_banner_time = 3,  -- delay in hours (number)
    etc_banner_destination_main = true,  -- send banner to main? (boolean)
    etc_banner_destination_pm = false,  -- send banner as PM? (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_chatlog.lua settings | shows the mainchat history on login

    etc_chatlog_permission = {    -- who is allowed to see the chatlog? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    etc_chatlog_min_level_adv = 100,  -- advanced level to clear chatlog (integer)
    etc_chatlog_max_lines = 200,  -- max posts to save in database (integer)
    etc_chatlog_default_lines = 5,  -- default amount of posts at Login / default amount for "show" command (integer)
    etc_chatlog_max_characters = 66, -- default amount of characters for each post at Login

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_cmdlog.lua settings | this script logs executed commands in a database

    etc_cmdlog_minlevel = 100,  -- who is allowed to show the log? (integer)

    etc_cmdlog_command_tbl = {  -- logged commands (array of strings)

        [ "reg" ] = true,
        [ "delreg" ] = true,
        [ "disconnect" ] = true,
        [ "ban" ] = true,
        [ "unban" ] = true,
        [ "upgrade" ] = true,
        [ "accinfo" ] = true,
        [ "nickchange" ] = true,
        [ "reload" ] = true,
        [ "restart" ] = true,
        [ "shutdown" ] = true,
        [ "trafficmanager" ] = true,
        [ "usercleaner" ] = true
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_log_cleaner.lua settings | this script adds a command to clean log files

    etc_log_cleaner_minlevel = 100,  -- min level to use this command? (integer)
    etc_log_cleaner_activate_error = true,  -- activate cleaner for 'error.log' (boolean)
    etc_log_cleaner_activate_cmd = true,  -- activate cleaner for 'cmd.log' (boolean)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_trafficmanager.lua settings | this script gives you the choise to block downloads/uploads/searches

    etc_trafficmanager_activate = true, -- activate this script? (boolean)

    etc_trafficmanager_permission = {  -- who is allowed to use this command? (array of integer)

    -- [ user_level ] = level means   user_level can block users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't block)
        [ 10 ] = 0,  -- guest (default = 0 = can't block
        [ 20 ] = 0,  -- reg (default = 0 = can't block)
        [ 30 ] = 0,  -- vip (default = 0 = can't block)
        [ 40 ] = 0,  -- svip (default = 0 = can't block)
        [ 50 ] = 0,  -- server (default = 0 = can't block)
        [ 55 ] = 0,  -- sbot (default = 0 = can't block)
        [ 60 ] = 40,  -- operator (default = 40 = to svip's)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operators)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisors)
        [ 100 ] = 100,  -- hubowner (default = 100 = can block all)
    },

    etc_trafficmanager_report = true,  -- send status report? (boolean)
    etc_trafficmanager_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    etc_trafficmanager_report_opchat = true,  -- send report as opchat feed? (boolean)
    etc_trafficmanager_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    etc_trafficmanager_blocklevel_tbl = {  -- blocked levels table (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = false,  -- admin
        [ 100 ] = false,  -- hubowner
    },

    etc_trafficmanager_sharecheck = true,  -- block users with 0 B share? This feature checks all users < oplevel (boolean)
    etc_trafficmanager_check_minshare = true,  -- block user instead of disconnect if usershare < minshare? This feature checks all users < oplevel (boolean)

    etc_trafficmanager_oplevel = 55,  -- show scriptsettings and blocklist, exclude from sharecheck (integer)

    etc_trafficmanager_login_report = true,  -- send report to blocked users on login (boolean)
    etc_trafficmanager_report_main = true,  -- report destination main (boolean)
    etc_trafficmanager_report_pm = false,  -- report destination pm (boolean)

    etc_trafficmanager_send_loop = true,  -- send report to blocked users as loop every x hours (report destination is the same as above) (boolean)
    etc_trafficmanager_loop_time = 6,  -- delay in hours (number)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_msgmanager.lua | this script blocks chats (main/pm) for specified levels

    etc_msgmanager_activate = true,  -- activate this script? (boolean)

    etc_msgmanager_permission = {  -- who is allowed to use this command? (array of integer)

    -- [ user_level ] = level means   user_level can block users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't block)
        [ 10 ] = 0,  -- guest (default = 0 = can't block
        [ 20 ] = 0,  -- reg (default = 0 = can't block)
        [ 30 ] = 0,  -- vip (default = 0 = can't block)
        [ 40 ] = 0,  -- svip (default = 0 = can't block)
        [ 50 ] = 0,  -- server (default = 0 = can't block)
        [ 55 ] = 0,  -- sbot (default = 0 = can't block)
        [ 60 ] = 40,  -- operator (default = 40 = to svip's)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operators)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisors)
        [ 100 ] = 100,  -- hubowner (default = 100 = can block all)
    },

    etc_msgmanager_report = true,  -- send status report? (boolean)
    etc_msgmanager_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    etc_msgmanager_report_opchat = true,  -- send report as opchat feed? (boolean)
    etc_msgmanager_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    etc_msgmanager_permission_main = {  -- who is allowed to write main messages? (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    etc_msgmanager_permission_pm = {  -- who is allowed to write pm messages? (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_hide_share.lua settings | this script hides the share of users by level permission and/or command

    -- Note: downloading filelist of a hidden share is still possible, this script doesn't block traffic!

    usr_hide_share_activate = false,  -- activate this script? (boolean)

    usr_hide_share_restrictions = {  -- hide share on the following levels (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = false,  -- admin
        [ 100 ] = false,  -- hubowner
    },

    usr_hide_share_permission = {  -- who is allowed to use this hide/unhide command? (array of integer)

    -- [ user_level ] = level means   user_level can block users with level max

        [ 0 ] = 0,  -- unreg (default = 0 = can't block)
        [ 10 ] = 0,  -- guest (default = 0 = can't block)
        [ 20 ] = 0,  -- reg (default = 0 = can't block)
        [ 30 ] = 0,  -- vip (default = 0 = can't block)
        [ 40 ] = 0,  -- svip (default = 0 = can't block)
        [ 50 ] = 0,  -- server (default = 0 = can't block)
        [ 55 ] = 0,  -- sbot (default = 0 = can't block)
        [ 60 ] = 40,  -- operator (default = 40 = to svip's)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operators)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisors)
        [ 100 ] = 100,  -- hubowner (default = 100 = can block all)
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_gag.lua settings | this script adds a command "gag" to mute or kennylize a user

    cmd_gag_permission = {  -- min level to use this cmd? (array of integer)

        -- [ user_level ] = level   means 'user_level' can gag users with 'level' max

        [ 0 ] = 0,  -- unreg (default = 0 = can't gag)
        [ 10 ] = 0,  -- guest (default = 0 = can't gag)
        [ 20 ] = 0,  -- reg (default = 0 = can't gag)
        [ 30 ] = 0,  -- vip (default = 0 = can't gag)
        [ 40 ] = 0,  -- svip (default = 0 = can't gag)
        [ 50 ] = 0,  -- server (default = 0 = can't gag)
        [ 55 ] = 0,  -- sbot (default = 0 = can't gag)
        [ 60 ] = 50,  -- operator (default = 50 = to server)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operator)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisor)
        [ 100 ] = 100,  -- hubowner (default = 100 = can gag all)
    },

    cmd_gag_user_notifiy = true,  -- choose if the target gets informed about his gag/ungag or not (boolean)

    cmd_gag_report = true,  -- send status report? (boolean)
    cmd_gag_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    cmd_gag_report_opchat = true,  -- send report as opchat feed? (boolean)
    cmd_gag_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_records.lua settings | this script adds and shows statistics about hubshare/usershare records

    etc_records_min_level = 20,  -- minlevel to show record statistic? (integer)
    etc_records_whereto_main = true,  -- show record statistic in main? (boolean)
    etc_records_whereto_pm = false,  -- show record statistic as pm? (boolean)

    etc_records_reportlvl = 20,  -- minlevel to see new record broadcast (integer)
    etc_records_sendMain = true,  -- send new records broadcast in main? (boolean)
    etc_records_sendPM = false,  -- send new records broadcast as pm? (boolean)

    etc_records_delay = 300,  -- delay for recheck the share- and user-amount in seconds (integer)
    etc_records_min_level_reset = 100,  -- who is allowed to reset the database? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// bot_session_chat.lua settings | this script can reg session chats

    bot_session_chat_minlevel = 20,  -- who can create session chats (integer)
    bot_session_chat_masterlevel = 100,  -- who can clean the session chats database (removes all existing session chats from hub) (integer)
    bot_session_chat_chatprefix = "[SESSION-CHAT]",  -- prefix for all session chats (no whitespaces allowed) (string)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_usercommands.lua settings | this script exports a module to reg usercommands (rightclick-menu)

    etc_usercommands_toplevelmenu = "Luadch Menu",  -- name of the toplevel menu (string)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_nick_prefix.lua settings | this script adds a prefix to the nick of a user

    usr_nick_prefix_activate = true,  -- activate this script? (boolean)

    usr_nick_prefix_prefix_table = {

        -- [ user_level ] = level_prefix (no whitespaces!) (array of strings)

        [ 0 ] = "[UNREG]",
        [ 10 ] = "[GUEST]",
        [ 20 ] = "[REG]",
        [ 30 ] = "[VIP]",
        [ 40 ] = "[SVIP]",
        [ 50 ] = "[SERVER]",
        [ 55 ] = "[SBOT]",
        [ 60 ] = "[OPERATOR]",
        [ 70 ] = "[SUPERVISOR]",
        [ 80 ] = "[ADMIN]",
        [ 100 ] = "[HUBOWNER]",
    },

    usr_nick_prefix_permission = {  -- choose which levels should be tagged (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_desc_prefix.lua settings | this script adds a prefix to the description of a user

    usr_desc_prefix_activate = true,  -- activate this script? (boolean)

    usr_desc_prefix_prefix_table = {

        -- [ user_level ] = level_prefix (array of strings)

        [ 0 ] = "[ UNREG ] ",
        [ 10 ] = "[ GUEST ] ",
        [ 20 ] = "[ REG ] ",
        [ 30 ] = "[ VIP ] ",
        [ 40 ] = "[ SVIP ] ",
        [ 50 ] = "[ SERVER ] ",
        [ 55 ] = "[ SBOT ] ",
        [ 60 ] = "[ OPERATOR ] ",
        [ 70 ] = "[ SUPERVISOR ] ",
        [ 80 ] = "[ ADMIN ] ",
        [ 100 ] = "[ HUBOWNER ] ",
    },

    usr_desc_prefix_permission = {  -- choose which levels should be tagged (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_hubstats.lua settings | this script shows statistics about the hub

    cmd_hubstats_oplevel = 60,  -- who can read the stats (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_dhtblocker.lua settings | this script blocks users with active DHT (distributed hash table)

    -- Note: if you want to host a closed private reg hub then it's strongly recommended to activate this script

    etc_dhtblocker_activate = true,  -- activate this script? (boolean)

    etc_dhtblocker_block_level = {  -- choose which levels should be checked (array of boolean)

        [ 0 ] = true,  -- unreg
        [ 10 ] = true,  -- guest
        [ 20 ] = true,  -- reg
        [ 30 ] = true,  -- vip
        [ 40 ] = true,  -- svip
        [ 50 ] = true,  -- server
        [ 55 ] = true,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    etc_dhtblocker_block_time = 15,  -- ban time in minutes (integer)

    etc_dhtblocker_report = true,  -- send report (boolean)
    etc_dhtblocker_report_toopchat = true,  -- send report to opchat (boolean)
    etc_dhtblocker_report_tohubbot = false,  -- send report to hubbot (boolean)
    etc_dhtblocker_report_level = 60,  -- report minlevel (only for hubbot message) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_redirect.lua settings | this script redirects users, level specified according to redirect_level table

    cmd_redirect_activate = true,  -- activate this script? (boolean)

    cmd_redirect_permission = {  -- min level to use this cmd? (array of integer)

        -- [ user_level ] = level   means 'user_level' can redirect users with 'level' max

        [ 0 ] = 0,  -- unreg (default = 0 = can't redirect)
        [ 10 ] = 0,  -- guest (default = 0 = can't redirect)
        [ 20 ] = 0,  -- reg (default = 0 = can't redirect)
        [ 30 ] = 0,  -- vip (default = 0 = can't redirect)
        [ 40 ] = 0,  -- svip (default = 0 = can't redirect)
        [ 50 ] = 0,  -- server (default = 0 = can't redirect)
        [ 55 ] = 0,  -- sbot (default = 0 = can't redirect)
        [ 60 ] = 50,  -- operator (default = 50 = to server)
        [ 70 ] = 60,  -- supervisor (default = 60 = to operator)
        [ 80 ] = 70,  -- admin (default = 70 = to supervisor)
        [ 100 ] = 100,  -- hubowner (default = 100 = can redirect all)
    },

    cmd_redirect_level = {  -- choose which levels should be auto redirect (array of boolean)

        [ 0 ] = false,  -- unreg (needs:reg_only = false)
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = false,  -- admin
        [ 100 ] = false,  -- hubowner
    },

    cmd_redirect_url = "adc://addy:port",  -- redirect url (string)

    cmd_redirect_report = true,  -- send report (boolean)
    cmd_redirect_report_opchat = true,  -- send report to opchat (boolean)
    cmd_redirect_report_hubbot = false,  -- send report to hubbot (boolean)
    cmd_redirect_llevel = 60,  -- report minlevel (only for hubbot message) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_sslinfo.lua settings | this script adds a command to show SSL informations about the client to hub connection by you or other users

    cmd_sslinfo_minlevel = 10,  -- min level to use this command? (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_myinf.lua settings | this script shows client INF from a user or yourself

    cmd_myinf_permission = {  -- permission to use this command? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// hub_runtime.lua settings | this script saves the hub runtime and adds a command to show/reset the hub runtime

    hub_runtime_minlevel = 100, -- min level to use this commands? (integer)

    hub_runtime_report = true,  -- send report (boolean)
    hub_runtime_report_opchat = true,  -- send report to opchat (boolean)
    hub_runtime_report_hubbot = false,  -- send report to hubbot (boolean)
    hub_runtime_llevel = 60,  -- report minlevel (only for hubbot message) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// usr_uptime.lua settings | this script counts the online time of the users

    usr_uptime_minlevel = 10,  -- permission to show your own uptime stats

    usr_uptime_permission = {  -- permission to show uptime stats of other users? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = true,  -- operator
        [ 70 ] = true,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// cmd_usercleaner.lua settings | this script shows and removes no longer used and never used accounts from "cfg/users.tbl"

    cmd_usercleaner_activate = true,  -- activate this script?

    cmd_usercleaner_permission = {  -- permission to use this command? (array of boolean)

        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    cmd_usercleaner_protected_levels = {  -- which levels should be excluded from clean? (array of boolean)
                                          -- never used accounts are excluded from protection
        [ 0 ] = false,  -- unreg
        [ 10 ] = false,  -- guest
        [ 20 ] = false,  -- reg
        [ 30 ] = false,  -- vip
        [ 40 ] = false,  -- svip
        [ 50 ] = false,  -- server
        [ 55 ] = false,  -- sbot
        [ 60 ] = false,  -- operator
        [ 70 ] = false,  -- supervisor
        [ 80 ] = true,  -- admin
        [ 100 ] = true,  -- hubowner
    },

    cmd_usercleaner_report = true,  -- send report (boolean)
    cmd_usercleaner_report_opchat = false,  -- send report to opchat (boolean)
    cmd_usercleaner_report_hubbot = true,  -- send report to hubbot (boolean)
    cmd_usercleaner_report_llevel = 100,  -- report minlevel (only for hubbot message) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// etc_onfailedauth.lua settings | this script sends a report if a user failed Auth

    etc_onfailedauth_report = true,  -- send status report? (boolean)
    etc_onfailedauth_report_opchat = true,  -- send report as opchat feed? (boolean)
    etc_onfailedauth_report_hubbot = false,  -- send report as hubbot msg? (boolean)
    etc_onfailedauth_llevel = 60,  -- min level to get a report? (only for hubbot msg) (integer)

    ---------------------------------------------------------------------------------------------------------------------------------
    --// user scripts (array of strings); scripts will be executed in this order!

    scripts = {

        "etc_keyprint.lua",  -- must be the first script in the table! reason: it uses cfg.set to change settings cfg.tbl, which will be used by later scripts
        "hub_cmd_manager.lua",  -- must be the second script in the table!
        "etc_cmdlog.lua",  -- must be the third script in the table!

        "bot_opchat.lua", -- must be above all other scripts who wants to use the opchat import
        "etc_report.lua", -- must be above all other scripts who wants to use the report import / needs opchat import
        "cmd_ban.lua", -- must be above all other scripts who wants to use the ban import / needs report import
        "usr_uptime.lua", -- must be above all other scripts who wants to use the usersuptime import

        "hub_inf_manager.lua",
        "hub_runtime.lua",  -- using report import
        "bot_regchat.lua",
        "bot_session_chat.lua",
        "bot_pm2ops.lua",
        "usr_slots.lua",
        "usr_share.lua",
        "usr_hubs.lua",  -- using report import
        "usr_nick_prefix.lua",
        "usr_desc_prefix.lua",
        "usr_hide_share.lua",
        "cmd_help.lua",
        "cmd_redirect.lua",  -- using report import
        "cmd_uptime.lua",
        "cmd_hubinfo.lua",
        "cmd_hubstats.lua",
        "cmd_myip.lua",
        "cmd_myinf.lua",
        "cmd_rules.lua",
        "cmd_userinfo.lua",
        "cmd_usersearch.lua",
        "cmd_slots.lua",
        "cmd_accinfo.lua",
        "cmd_setpass.lua",
        "cmd_nickchange.lua",  -- using report import
        "cmd_mass.lua",
        "cmd_talk.lua",
        "cmd_pm2offliners.lua",
        "cmd_topic.lua",  -- using report import
        "cmd_userlist.lua",
        "cmd_disconnect.lua",  -- using report import
        "cmd_reg.lua",  -- using report import
        "cmd_upgrade.lua",  -- using report import
        "cmd_errors.lua",
        "cmd_reload.lua",
        "cmd_restart.lua",
        "cmd_shutdown.lua",
        "cmd_ascii.lua",
        "cmd_gag.lua",  -- using report import
        "cmd_sslinfo.lua",
        "etc_hubcommands.lua",
        "etc_usercommands.lua",
        "etc_blacklist.lua",
        "etc_log_cleaner.lua",
        "etc_motd.lua",
        "etc_userlogininfo.lua",
        "etc_banner.lua",
        "etc_msgmanager.lua",  -- using report import
        "etc_chatlog.lua",
        "etc_trafficmanager.lua",  -- using report import -- must be above all other scripts who wants to use the block import
        "cmd_delreg.lua",  -- using report, ban, block import
        "cmd_usercleaner.lua", -- using report import
        "etc_records.lua",
        "etc_dhtblocker.lua",  -- using report import
        "etc_hide_opchat.lua",
        "etc_dummy_warning.lua",
        "etc_onfailedauth.lua",  -- using report import
        --------------------------------------
        --// add here your additional scripts



        --------------------------------------
        "hub_user_lastseen.lua",
        "hub_bot_cleaner.lua",  --  must be the second last script in the table
        "etc_unknown_command.lua",  -- must be the last script in the table

    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// SSL parameter settings

    ssl_params = {  -- ssl params according to luasec specs (string table)

        mode = "server",  -- do not touch this!
        key = "certs/serverkey.pem",  -- your ssl key
        certificate = "certs/servercert.pem",  -- your cert
        cafile = "certs/cacert.pem",  -- your ca file
        options = { "no_sslv2", "no_sslv3" },  -- do not touch this!
        curve = "prime256v1",  -- do not touch this!

        --// IMPORTANT:
        --// there are four possible TLS configs to your choice, but you can only use one of
        --// the following configs at the same time, you have to comment out the other ones!
        --// "comment out" means "--" at the beginning of the line

            --// use this config for:  TLSv1.2 with AES128 only
                --protocol = "tlsv1_2",
                --ciphers = "ECDHE-ECDSA-AES128-GCM-SHA256",

            --// use this config for:  TLSv1.2 with AES256 only
                --protocol = "tlsv1_2",
                --ciphers = "ECDHE-ECDSA-AES256-GCM-SHA384",

            --// use this config for:  TLSv1.2 with AES128 + AES256 (default)
                protocol = "tlsv1_2",
                ciphers = "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256",

            --// use this config for:  TLSv1.3 with strongest available cipher; requires OpenSSL 1.1.1 or higher
                --protocol = "tlsv1_3",
                --ciphers = "HIGH+kEDH:HIGH+kEECDH:HIGH:!PSK:!SRP:!3DES:!aNULL",

    },

    ---------------------------------------------------------------------------------------------------------------------------------
    --// CFG profile | do not touch this

    scripts_cfg_profile = "default",  -- your cfg profile (string)

}
